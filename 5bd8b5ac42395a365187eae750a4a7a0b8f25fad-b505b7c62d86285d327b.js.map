{"version":3,"file":"5bd8b5ac42395a365187eae750a4a7a0b8f25fad-b505b7c62d86285d327b.js","mappings":"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","sources":["webpack://ca/./node_modules/camelcase/index.js","webpack://ca/../src/image-utils.ts","webpack://ca/../src/components/hooks.ts","webpack://ca/../src/components/layout-wrapper.tsx","webpack://ca/../src/components/picture.tsx","webpack://ca/../src/components/placeholder.tsx","webpack://ca/../src/components/main-image.tsx","webpack://ca/../src/components/gatsby-image.server.tsx","webpack://ca/../src/components/gatsby-image.browser.tsx","webpack://ca/../src/components/static-image.server.tsx","webpack://ca/../src/components/static-image.tsx","webpack://ca/./src/components/hero.tsx","webpack://ca/./src/components/hgroup.tsx","webpack://ca/./src/components/image.tsx","webpack://ca/./src/hooks/useStorageState.tsx","webpack://ca/./src/utils/constants.ts","webpack://ca/./src/utils/environment.ts","webpack://ca/./src/components/currencySelector.tsx","webpack://ca/./src/components/debug.tsx","webpack://ca/./src/components/layout.tsx","webpack://ca/./src/utils/ui.ts","webpack://ca/./src/components/vgroup.tsx","webpack://ca/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import styled from \"@emotion/styled\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport React from \"react\"\nimport OptimizedImage from \"./image\"\n\nexport const HeroText = styled(\"div\")`\n\n  font-family: \"Crimson Pro\";\n  color: #FFF;\n  font-size: 1.6rem;\n  font-weight: 700;\n  \n  @media (min-width: 768px) { /* Tablet and up */\n    font-size: 3rem;\n  }\n\n  @media (min-width: 1024px) { /* Large devices and up */\n    font-size: 3.5rem;\n  }\n`\n\nexport interface HeroProps {\n  image?: string // TODO\n  imageBytes? // TODO\n  children\n}\n\nexport function Hero2(props: HeroProps) {\n  return (\n    <div style={{ display: \"grid\" }}>\n      {/* You can use a GatsbyImage component if the image is dynamic */}\n      <OptimizedImage\n        image={props.imageBytes}\n        altText=\"TODO\"\n        style={{\n          gridArea: \"1/1\",\n          // You can set a maximum height for the image, if you wish.\n          maxHeight: 500,\n        }}\n      />\n      {/* <ConstrainedImageComponent\n        imageName={props.image}\n        altText=\"TODO\"\n        style={{\n          gridArea: \"1/1\",\n          // You can set a maximum height for the image, if you wish.\n          maxHeight: 500,\n        }} /> */}\n      {/* <StaticImage\n        style={{\n          gridArea: \"1/1\",\n          // You can set a maximum height for the image, if you wish.\n          maxHeight: 500,\n        }}\n        layout=\"fullWidth\"\n        // You can optionally force an aspect ratio for the generated image\n        aspectRatio={2 / 1}\n        // This is a presentational image, so the alt should be an empty string\n        alt=\"\"\n        // Assisi, Perúgia, Itália by Bernardo Ferrari, via Unsplash\n        src={\n          // \"https://images.unsplash.com/photo-1604975999044-188783d54fb3?w=2589\"\n          props.image\n        }\n        formats={[\"auto\", \"webp\", \"avif\"]}\n      /> */}\n      <div\n        style={{\n          // By using the same grid area for both, they are stacked on top of each other\n          gridArea: \"1/1\",\n          position: \"relative\",\n          // This centers the other elements inside the hero component\n          placeItems: \"center\",\n          display: \"grid\",\n        }}\n      >\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport function Hero() {\n  return (\n    <div style={{ display: \"grid\" }}>\n      {/* You can use a GatsbyImage component if the image is dynamic */}\n      <StaticImage\n        style={{\n          gridArea: \"1/1\",\n          // You can set a maximum height for the image, if you wish.\n          maxHeight: 500,\n        }}\n        layout=\"fullWidth\"\n        // You can optionally force an aspect ratio for the generated image\n        aspectRatio={2 / 1}\n        // This is a presentational image, so the alt should be an empty string\n        alt=\"\"\n        // Assisi, Perúgia, Itália by Bernardo Ferrari, via Unsplash\n        src={\n          // \"https://images.unsplash.com/photo-1604975999044-188783d54fb3?w=2589\"\n          \"../images/hero3.jpg\"\n        }\n        formats={[\"auto\", \"webp\", \"avif\"]}\n      />\n      <div\n        style={{\n          // By using the same grid area for both, they are stacked on top of each other\n          gridArea: \"1/1\",\n          position: \"relative\",\n          // This centers the other elements inside the hero component\n          placeItems: \"center\",\n          display: \"grid\",\n        }}\n      >\n        {/* Any content here will be centered in the component */}\n        <HeroText>Your guide to the Philippines</HeroText>\n      </div>\n    </div>\n  )\n}\n\nexport default Hero\n","\nimport styled from \"@emotion/styled\"\nimport React from \"react\"\n\nconst HGroupStyle = styled(\"div\")`\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n`\nexport interface HGroupProps {\n  style?: React.CSSProperties\n  children\n}\n\nexport default function HGroup(props: HGroupProps) {\n  return <HGroupStyle style={props.style}>{props.children}</HGroupStyle>\n}","import { graphql, useStaticQuery } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport React from 'react'\n\nexport const ConstrainedImageComponent = (props: { imageName, altText?, style?}) => {\n\n    const { imageName, altText, style } = props\n\n    // For responsive images, you'll want to use a layout value of CONSTRAINED or FULL_WIDTH instead of FIXED. \n    // The CONSTRAINED layout will maintain the image’s aspect ratio and resize the image to fit the container while \n    // FULL_WIDTH will grow to fill its container, potentially becoming larger than its pixel size.\n    const data = useStaticQuery(graphql`\n        query {\n            allFile {\n                edges {\n                    node {\n                        name\n                        childImageSharp {\n                            gatsbyImageData(layout: CONSTRAINED, width: 800)\n                        }\n                    }\n                }\n            }\n        }\n    `)\n\n    const image = data.allFile.edges.find(edge => edge.node.name === imageName)?.node.childImageSharp?.gatsbyImageData\n\n    if (!image) {\n        return null\n    }\n\n    return <OptimizedImage image={image} style={style} altText={altText} />\n}\n\nconst OptimizedImage = ({ image, altText, style }) => {\n\n    return <GatsbyImage\n        image={getImage(image)}\n        alt={altText}\n        style={style}\n    // layout=\"fullWidth\"\n    // You can optionally force an aspect ratio for the generated image\n    // aspectRatio={2 / 1}\n    // This is a presentational image, so the alt should be an empty string\n    // alt=\"\"\n    // Assisi, Perúgia, Itália by Bernardo Ferrari, via Unsplash\n    // src={\n    //     // \"https://images.unsplash.com/photo-1604975999044-188783d54fb3?w=2589\"\n    //     props.image\n    // }\n    // formats={[\"auto\", \"webp\", \"avif\"]}\n    />\n}\n\nexport default OptimizedImage","import type { Dispatch, SetStateAction } from \"react\"\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\"\n\nfunction getValueFromStorage(storage: Storage, k: string) {\n\n    if (typeof storage === \"undefined\") {\n        return null\n    }\n\n    try {\n\n        const v = storage.getItem(k) ?? \"null\"\n\n        if (v == \"undefined\" || v == \"null\") {\n            return null\n        } else {\n            return JSON.parse(v)\n        }\n\n    } catch (error) {\n        console.error(error)\n        return null\n    }\n}\n\nfunction saveValueToStorage<S>(storage: Storage, k: string, v: S) {\n\n    if (typeof storage === \"undefined\") {\n        return null\n    }\n\n    return storage.setItem(k, JSON.stringify(v))\n}\n\n/**\n * @param key Key of the storage object\n * @param initialState Default initial value\n */\nfunction initialize<S>(storage: Storage, key: string, initialState: S) {\n    const valueLoadedFromStorage = getValueFromStorage(storage, key)\n    if (valueLoadedFromStorage === null) {\n        return initialState\n    } else {\n        return valueLoadedFromStorage\n    }\n}\n\ntype UseStorageStateReturnValue<S> = [\n    S,\n    Dispatch<SetStateAction<S>>,\n    () => void\n]\n\ntype BroadcastCustomEvent<S> = CustomEvent<{ newValue: S }>\n\nfunction useStorageState<S>(\n    storage: Storage,\n    k: string,\n    initialState?: S | (() => S)\n): UseStorageStateReturnValue<S> {\n\n    const [value, setValue] = useState(() => initialize(storage, k, initialState))\n    const isUpdateFromCrossDocumentListener = useRef(false)\n    const isUpdateFromWithinDocumentListener = useRef(false)\n    const customEventTypeName = useMemo(() => {\n        return `${k}-storage-update`\n    }, [k])\n\n    useEffect(() => {\n        /**\n         * We need to ensure there is no loop of\n         * storage events fired. Hence we are using a ref\n         * to keep track of whether setValue is from another\n         * storage event\n         */\n        if (\n            !isUpdateFromCrossDocumentListener.current ||\n            !isUpdateFromWithinDocumentListener.current\n        ) {\n            saveValueToStorage<S>(storage, k, value)\n        }\n    }, [k, value])\n\n    const listenToCrossDocumentStorageEvents = useCallback(\n        (event: StorageEvent) => {\n            if (event.storageArea === storage && event.key === k) {\n                try {\n                    isUpdateFromCrossDocumentListener.current = true\n                    const newValue = JSON.parse(event.newValue ?? \"null\")\n                    if (value !== newValue) {\n                        setValue(newValue)\n                    }\n                } catch (error) {\n                    console.log(error)\n                }\n            }\n        },\n        [k, value]\n    )\n\n    // check for changes across windows\n    useEffect(() => {\n        // eslint-disable-next-line no-negated-condition\n        if (typeof window !== \"undefined\") {\n            window.addEventListener(\"storage\", listenToCrossDocumentStorageEvents)\n\n            return () => {\n                window.removeEventListener(\n                    \"storage\",\n                    listenToCrossDocumentStorageEvents\n                )\n            }\n        } else {\n            console.warn(\"[useStorageState] window is undefined\")\n\n            return () => { }\n        }\n    }, [listenToCrossDocumentStorageEvents])\n\n    const listenToCustomEventWithinDocument = useCallback(\n        (event: BroadcastCustomEvent<S>) => {\n            try {\n                isUpdateFromWithinDocumentListener.current = true\n                const { newValue } = event.detail\n                if (value !== newValue) {\n                    setValue(newValue)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n        },\n        [value]\n    )\n\n    // check for changes within document\n    useEffect(() => {\n        // eslint-disable-next-line no-negated-condition\n        if (typeof document !== \"undefined\") {\n            document.addEventListener(\n                customEventTypeName,\n                listenToCustomEventWithinDocument\n            )\n\n            return () => {\n                document.removeEventListener(\n                    customEventTypeName,\n                    listenToCustomEventWithinDocument\n                )\n            }\n        } else {\n            console.warn(\"[useStorageState] document is undefined\")\n            return () => { }\n        }\n    }, [customEventTypeName, listenToCustomEventWithinDocument])\n\n    const broadcastValueWithinDocument = useCallback(\n        (newValue: S) => {\n            // eslint-disable-next-line no-negated-condition\n            if (typeof document !== \"undefined\") {\n                const event: BroadcastCustomEvent<S> = new CustomEvent(\n                    customEventTypeName,\n                    { detail: { newValue } }\n                )\n                document.dispatchEvent(event)\n            } else {\n                console.warn(\"[useStorageState] document is undefined\")\n            }\n        },\n        [customEventTypeName]\n    )\n\n    const set = useCallback(\n        (newValue: S) => {\n            isUpdateFromCrossDocumentListener.current = false\n            isUpdateFromWithinDocumentListener.current = false\n            setValue(newValue)\n            broadcastValueWithinDocument(newValue)\n        },\n        [broadcastValueWithinDocument]\n    )\n\n    const remove = useCallback(() => {\n        storage.removeItem(k)\n    }, [k])\n\n    return [value, set, remove]\n}\n\nexport function useLocalStorageState<S>(k: string, initialState?: S | (() => S)) {\n    if (typeof window !== 'undefined') {\n        return useStorageState(localStorage, k, initialState)\n    } else {\n        return [initialState, (x) => x, () => null]\n    }\n}\n\nexport function useSessionStorageState<S>(k: string, initialState?: S | (() => S)) {\n    if (typeof window !== 'undefined') {\n        return useStorageState(sessionStorage, k, initialState)\n    } else {\n        return [initialState, (x) => x, () => null]\n    }\n}","import { getEnvironment } from \"./environment\"\n\n\n/**\n * Local storage keys, prefixed by environment to avoid issues when testing \n * multiple envs in the same browser session.\n */\nconst env = getEnvironment()\nconst LS_PREFIX = \"ca_\"\nexport const APP_NAME = \"cebuanna\"\nexport const APP_VERSION = LS_PREFIX + env + \"_version\"\nexport const LOG_LEVEL_KEY = LS_PREFIX + env + \"_log_level\"\nexport const LS_CURRENCY = LS_PREFIX + env + \"_currency\"\n\n","export function getEnvironment() {\n    return process.env.NODE_ENV\n}\n\nexport function getVersion() {\n    return process.env.APP_VERSION\n}\n\nexport function isUnit() {\n    return getEnvironment() == \"unit\"\n}\n\nexport function isLocal() {\n    return getEnvironment() == \"local\" || getEnvironment() == \"locals\"\n}\n\nexport function isDevelopment() {\n    return getEnvironment() == \"development\"\n}\n\nexport function isProduction() {\n    return getEnvironment() == \"production\"\n}","import styled from \"@emotion/styled\"\nimport React from \"react\"\nimport { useLocalStorageState } from \"../hooks/useStorageState\"\nimport { LS_CURRENCY } from \"../utils/constants\"\nimport { round } from \"../utils/ui\"\nimport HGroup from \"./hgroup\"\n\nconst Root = styled(\"div\")`\n    position: fixed;\n    top: 10px;\n    right: 10px;\n    z-index: 9999;\n    padding: 10px;\n    background: rgba(255,255,255,0.6);\n    font-weight: 700;\n    border-radius: 10px;\n`\n\nexport interface CurrencySelectorProps {\n    style?: React.CSSProperties\n    children\n}\n\ninterface CurrencyOption {\n    code: string\n    usdRate: number\n    format: string\n}\n\nexport const CURRENCIES: CurrencyOption[] = [\n    { code: 'USD', usdRate: 1, format: \"${0}\" },\n    { code: 'AUD', usdRate: 1.4, format: \"${0}\" },\n    { code: 'PHP', usdRate: 56, format: \"{0} PHP\" }\n]\n\nconst DEFAULT_CURRENCY = CURRENCIES[0]\n\nexport function getCurrency(currency: string) {\n    return CURRENCIES.find(x => x.code.toUpperCase() == currency.toUpperCase()) || DEFAULT_CURRENCY\n}\n\nconst CurrencySelector = () => {\n\n    const [currency, setCurrency] = useLocalStorageState<string>(LS_CURRENCY, DEFAULT_CURRENCY.code)\n\n    const handleChange = (event) => {\n        setCurrency(event.target.value)\n    }\n\n    return (\n        <Root>\n            <HGroup style={{ gap: 4 }}>\n                <div>Currency</div>\n                <select value={currency} onChange={handleChange}>\n                    {CURRENCIES.map(x => {\n                        return <option\n                            key={x.code}\n                            value={x.code}>\n                            {x.code}\n                        </option>\n                    })}\n                </select>\n            </HGroup>\n        </Root>\n    )\n}\n\nexport function Currency({ children }) {\n    const [currency] = useLocalStorageState<string>(LS_CURRENCY, DEFAULT_CURRENCY.code)\n    const selectedCurrency = getCurrency(currency)\n    const value = (round(parseFloat(children as any) * selectedCurrency.usdRate))\n    return <span>{selectedCurrency.format.replace(\"{0}\", value.toString())}</span>\n}\n\nexport default CurrencySelector","import styled from \"@emotion/styled\"\n\nexport const ViewportHelper = styled(\"div\")`\n    position: fixed;\n    bottom: 0px;\n    left: 0px;\n    width: 20px;\n    height: 20px;\n    background: red;\n\n    @media (min-width: 768px) { /* Tablet and up */\n        background: pink;\n    }\n\n    @media (min-width: 1024px) { /* Large devices and up */\n        background: blue;\n    }\n`\n","import { css, Global } from \"@emotion/react\"\nimport styled from \"@emotion/styled\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport React from \"react\"\nimport CurrencySelector, { Currency } from \"./currencySelector\"\nimport { ViewportHelper } from \"./debug\"\nimport { Link, RemoteLink } from \"./link\"\n\nconst markdownRenderers = {\n    table: (props: any) => (\n        <div style={{ width: \"100%\", overflowX: \"auto\" }} {...props}>\n            {props.children}\n        </div>\n    ),\n    a: Link,\n    OutboundLink: RemoteLink,\n    Currency: Currency,\n}\n\n\nconst Root = styled(\"div\")`\n\n`\n\nconst globalStyles = css`\n\n    body {\n        margin: 0;\n        font-family: Inter;\n        -webkit-font-smoothing: antialiased;\n        font-feature-settings: \"kern\";\n        line-height: 1.5;\n        font-weight: 400;\n    }\n\n    a {\n        text-decoration: none;\n        color: inherit;\n    }\n\n    @media screen and (min-width: 1024px) {\n        font-size: 1.125rem;\n        line-height: 1.7777778;\n    }\n\n    @media screen and (min-width: 640px) {\n        font-size: 1rem;\n        line-height: 1.75;\n    }\n\n    h1, h2, h3, h4, h5, h6 {\n        font-family: \"Crimson Pro\";\n        font-weight: 700;\n    }\n\n    h1 {\n        font-size: 2.5rem;\n    }\n\n    h2 {\n        font-size: 2.1rem;\n    }\n\n    h3 {\n        font-size: 1.8rem;\n    }\n\n    summary {\n        text-transform: uppercase;\n        font-weight: bold;\n    }\n\n    ul {\n        // list-style-type: none;\n    }\n\n    table {\n        border-collapse: collapse;\n        text-indent: initial;\n        border-spacing: 2px;\n        width: 100%;\n    }\n\n    thead tr {\n        border-top: none;\n        border-bottom: none !important;\n    }\n\n    thead th {\n        border-top: none;\n        border-bottom: none !important;\n    }\n\n    th {\n        padding: 0.75rem;\n        vertical-align: top;\n        border-top: 1px solid #dee2e6;\n        text-align: left;\n    }\n\n    td {\n        padding: 0.75rem;\n        vertical-align: top;\n        border-top: 1px solid #dee2e6;\n    }\n\n    tbody {\n        display: table-row-group;\n        vertical-align: middle;\n        border-color: inherit;\n    }\n`\n\nexport default function Layout(props: { children, style?}) {\n    return (\n        <Root style={props.style}>\n            <Global styles={globalStyles} />\n            <ViewportHelper />\n            <CurrencySelector />\n            <MDXProvider components={markdownRenderers}>{props.children}</MDXProvider>\n        </Root>\n    )\n}","// import * as copy from 'copy-to-clipboard';\n// import * as numeral from 'numeral';\n// import { USER_LOC_KEY } from './constants';\n// import { isLocalStorageSupported } from './localStorage';\n// import { error, warn } from './logger';\n\n// export function copyToClipboard(value, label = \"Copied. Paste using Ctrl v\") {\n//     copy(value)\n//     EventManager.Instance.emitNotification(label)\n// }\n\n// export function notify(msg: string | React.ReactNode) {\n//     EventManager.Instance.emitNotification(msg)\n// }\n\n// export function prettyNumber(x: number) {\n//     return numeral(x || 0).format('0,0')\n// }\n\n// export function pcToString(pc: number): string {\n//     return !!pc ? round(pc * 100, 2).toString() : \"0\"\n// }\n\n// export function getTablePageSize(offset = 300, defaultRowHeight = 42, defaultPageSize = 15) {\n//     let size = (window.innerHeight && Math.min(Math.round((window.innerHeight - offset) / defaultRowHeight), 25)) || defaultPageSize\n//     if (size <= 0) {\n//         warn(\"Table page size was <= 0!\", window.innerHeight, window.innerWidth)\n//         size = defaultPageSize\n//     }\n//     return size\n// }\n\n// /**\n//  * Merges two arrays together, ensuring duplicates are ignored \n//  * @param a \n//  * @param b \n//  */\n// export function mergePageResults(a: { id: string }[], b: { id: string }[]) {\n\n//     // Test for duplicates\n//     let c = [...a]\n\n//     for (let bx of b) {\n//         if (a.findIndex(x => x.id == bx.id) == -1) {\n//             c.push(bx)\n//         } else {\n//             warn(\"Page merge ignored duplicate\")\n//         }\n//     }\n\n//     return c\n// }\n\n// /**\n//  * Resolve a view prop parameter. Rules:\n//  * \n//  * - Check router props\n//  * - Check user props\n//  * - Return undefined\n//  * \n//  * @param props \n//  * @param k \n//  */\n// export function resolveViewProp(props, k: \"sId\" | \"aId\") {\n//     if (props[k]) {\n//         return props[k]\n//     } else if (props.params && props.params[k]) {\n//         return props.params[k]\n//     } else {\n//         if (k == \"sId\" && props.user.Type === UserAccountType.Store) {\n//             return props.user.SelectedStore.sId\n//         } else if (k == \"aId\" && props.user.Type === UserAccountType.Affiliate) {\n//             return props.user.SelectedStore.aId\n//         }\n//     }\n//     return undefined\n// }\n\n// export function resolveUserLocation() {\n\n//     try {\n//         let cached = isLocalStorageSupported() && localStorage.getItem(USER_LOC_KEY)\n//         if (cached) {\n//             let loc: { country: string } = JSON.parse(cached) || null\n//             if (loc && loc.country) {\n//                 // loc.country = \"IN\"\n//                 let hash = \"\"\n//                 for (let i = 0; i < loc.country.length; i++) {\n//                     hash += pad(loc.country.charCodeAt(i), 3)\n//                 }\n//                 return { code: hash }\n//             }\n//         }\n//     } catch (err) {\n//         error(err)\n//     }\n\n//     return null\n// }\n\n// export function pad(n, width: number, z?: string) {\n//     z = z || '0';\n//     n = n + '';\n//     return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n// }\n\nexport function round(value: number, places: number = 2) {\n    return +(Math.round(`${value}e+${places}` as any) + `e-${places}`) as any\n}\n\n// export function isWithinIFrame() {\n//     try {\n//         return window.self !== window.top\n//     } catch (e) {\n//         return true\n//     }\n// }\n\n// export function isFacebookApp() {\n//     try {\n//         var ua = navigator.userAgent || navigator.vendor || (window as any).opera\n//         return !!ua && (ua.toUpperCase().indexOf(\"FBAN\") > -1 || ua.toUpperCase().indexOf(\"FBAV\") > -1)\n//     } catch (e) {\n//         return false\n//     }\n// }\n\n// export function getUserAgent() {\n//     try {\n//         let referrer = document.referrer;\n//         var ua = navigator.userAgent || navigator.vendor || (window as any).opera\n//         return {\n//             referrer,\n//             ua,\n//             fb: isFacebookApp()\n//         }\n//     } catch (e) {\n//         return {}\n//     }\n// }\n\n// // let x = inIframe()\n// // warn(\"inside iframe?\", x)\n\n\n// export function fill(x: string, ...args) {\n\n//     // return React.useMemo(() => {\n\n//     args.forEach((v, i) => {\n//         let re = new RegExp(`\\\\{${i}\\\\}`, \"g\")\n//         x = x.replace(re, v)\n//     })\n\n//     let aTerm = StoreManager.Instance.userStore.Term\n\n//     if (aTerm) {\n//         x = x.replace(/XX/g, AffiliateTerm[aTerm])\n//     }\n\n//     return x\n\n//     // }, [x, ...args])\n// }\n\n\n// // @see https://stackoverflow.com/questions/49820013/javascript-scrollintoview-smooth-scroll-and-offset\n// export function scrollToElement(e: Element) {\n//     e.scrollIntoView({ block: 'center' })\n// }","\nimport styled from \"@emotion/styled\"\nimport React from \"react\"\n\nconst VGroupStyle = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`\n\nexport interface VGroupProps {\n  style?: React.CSSProperties\n  children\n}\n\nexport default function VGroup(props: VGroupProps) {\n  return <VGroupStyle style={props.style}>{props.children}</VGroupStyle>\n}","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","camelCase","input","options","Array","isArray","TypeError","pascalCase","preserveConsecutiveUppercase","map","x","trim","filter","length","join","toLowerCase","locale","string","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","lastIndex","m1","charAt","_","identifier","m","postProcess","module","exports","hasNativeLazyLoadSupport","HTMLImageElement","prototype","node","Boolean","images","_node$images$fallback","fallback","src","gatsbyImageData","gatsbyImage","_node$childImageSharp","childImageSharp","srcSet","width","height","layout","wrapperStyle","className","style","getMainProps","isLoading","isLoaded","loading","shouldLoad","_extends","opacity","getPlaceholderProps","placeholder","backgroundColor","objectFit","objectPosition","position","top","left","bottom","right","result","transition","Sizer","React","createElement","paddingTop","maxWidth","display","alt","role","LayoutWrapper","_ref","children","props","_objectWithoutPropertiesLoose","Fragment","Image","decoding","Picture","_ref2","sources","sizes","media","type","key","fallbackImage","propTypes","PropTypes","displayName","Placeholder","_Picture$propTypes","propName","componentName","Error","MainImage","removeNewLines","str","altValidator","rest","image","_excluded","Set","renderImageToStringPromise","renderImage","GatsbyImageHydrator","as","class","preactClass","onStartLoad","onLoad","onError","getWrapperProps","wStyle","wClass","wrapperProps","root","useRef","useMemo","JSON","stringify","sizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","animationFrame","cleanupCallback","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","_getStaticImage","StaticImage","__imageData","imageData","__error","console","warn","imgClassName","imgStyle","placeholderBackgroundColor","cleanedImages","checkDimensionProps","validLayouts","GatsbyImageBrowser","HeroText","_styled","Hero2","___EmotionJSX","OptimizedImage","imageBytes","altText","gridArea","maxHeight","placeItems","aspectRatio","formats","HGroupStyle","HGroup","ConstrainedImageComponent","imageName","useStaticQuery","allFile","edges","find","edge","name","_data$allFile$edges$f","_data$allFile$edges$f2","getImage","initialize","storage","initialState","valueLoadedFromStorage","k","v","getItem","parse","error","getValueFromStorage","useStorageState","value","setValue","useState","isUpdateFromCrossDocumentListener","isUpdateFromWithinDocumentListener","customEventTypeName","setItem","saveValueToStorage","listenToCrossDocumentStorageEvents","useCallback","event","storageArea","newValue","log","window","listenToCustomEventWithinDocument","detail","document","broadcastValueWithinDocument","CustomEvent","dispatchEvent","set","remove","removeItem","useLocalStorageState","localStorage","env","process","LS_PREFIX","LS_CURRENCY","Root","CURRENCIES","code","usdRate","format","DEFAULT_CURRENCY","currency","setCurrency","gap","onChange","target","ViewportHelper","markdownRenderers","table","overflowX","a","Link","OutboundLink","RemoteLink","Currency","selectedCurrency","getCurrency","places","Math","round","parseFloat","toString","globalStyles","Layout","Global","styles","CurrencySelector","MDXProvider","components","VGroupStyle","VGroup","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider"],"sourceRoot":""}